// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id      Int      @id @default(autoincrement())
  name    String?
  email   String   @unique
  password String
  role    Role     @default(GUEST)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
  articles Article[]
  comments Comment[]
}


// Article Model
model Article {
  id      Int      @id @default(autoincrement())
  title    String
  content   String
  image String
  role    Role     @default(AUTHOR)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
  author      User   @relation(fields: [authorId], references: [id]) 
  authorId Int
  comments Comment[]
  categories CategoriesOnArticles[]
}



// Comments Model
model Comment {
  id      Int      @id @default(autoincrement())
  content   String
  role    Role     @default(GUEST)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
  author     User   @relation(fields: [authorId], references: [id])
  authorId Int
  article      Article   @relation(fields: [articleId], references: [id])
  articleId Int
}

// Categorie Model
model Category {
  id      Int      @id @default(autoincrement())
  name   String
  role    Role     @default(GUEST)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
  articles CategoriesOnArticles[]
}

//Categorie & Article
model CategoriesOnArticles {
  article      Article   @relation(fields: [articleId], references: [id])
  articleId Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

   @@id([articleId, categoryId])
}


enum Role {
  GUEST
  AUTHOR
  ADMIN
}